import { Array } from "@siteimprove/alfa-array";
/**
 * Class for modelling set of boolean flags.
 * Flags are stored as bits in a single number. Due to Javascript limitation
 * on bitwise operations, this means that a maximum of 32 flags can be handled.
 * We currently limit the class at a maximum of 8 flags since it fits our needs.
 *
 * @public
 */
export class Flags {
    _value;
    constructor(value) {
        this._value = value;
    }
    /**
     * A compact representation of the set of flags as a number
     */
    get value() {
        return this._value;
    }
    /**
     * Test whether a given flag is present (or set) in the set of flags
     */
    has(flag) {
        return (this._value & flag) === flag;
    }
    /**
     * Test whether a given flag is present (or set) in the set of flags
     */
    isSet = this.has;
    /**
     * Adds a list of flags to the set, and return a new one.
     */
    add(...flags) {
        return new this.constructor(this._value | Flags._reduce(...flags));
    }
    /**
     * Adds a list of flags to the set (aka sets the flags), and return a new one.
     */
    set = this.add;
    /**
     * Removes a list of flags from the set, and return a new one.
     */
    remove(...flags) {
        return new this.constructor(this._value & ~Flags._reduce(...flags));
    }
    /**
     * Removes a list of flags to the set (aka unsets the flags), and return a new one.
     */
    unset = this.remove;
    /**
     * Reduces a list of flags into a single number representing all of them
     * (with only the corresponding bits set to 1).
     */
    static _reduce(...flags) {
        return Array.reduce(flags, (prev, cur) => prev | cur, 0);
    }
    equals(value) {
        return value instanceof Flags && this._value === value._value;
    }
    toJSON() {
        return {};
    }
}
//# sourceMappingURL=flags.js.map