import { Equatable } from "@siteimprove/alfa-equatable";
/**
 * @public
 */
export var Predicate;
(function (Predicate) {
    function test(predicate, value, ...args) {
        return predicate(value, ...args);
    }
    Predicate.test = test;
    function fold(predicate, ifTrue, ifFalse, value, ...args) {
        return predicate(value, ...args) ? ifTrue(value) : ifFalse(value);
    }
    Predicate.fold = fold;
    function not(predicate) {
        return (value, ...args) => !predicate(value, ...args);
    }
    Predicate.not = not;
    function and(...predicates) {
        return (value, ...args) => {
            for (let i = 0, n = predicates.length; i < n; i++) {
                if (!predicates[i](value, ...args)) {
                    return false;
                }
            }
            return true;
        };
    }
    Predicate.and = and;
    function or(...predicates) {
        return (value, ...args) => {
            for (let i = 0, n = predicates.length; i < n; i++) {
                if (predicates[i](value, ...args)) {
                    return true;
                }
            }
            return false;
        };
    }
    Predicate.or = or;
    function xor(...predicates) {
        return and(or(...predicates), not(and(...predicates)));
    }
    Predicate.xor = xor;
    function nor(...predicates) {
        return not(or(...predicates));
    }
    Predicate.nor = nor;
    function nand(...predicates) {
        return not(and(...predicates));
    }
    Predicate.nand = nand;
    function equals(...values) {
        return (other) => values.some((value) => Equatable.equals(other, value));
    }
    Predicate.equals = equals;
    function property(property, predicate) {
        return (value, ...args) => predicate(value[property], ...args);
    }
    Predicate.property = property;
    function tee(predicate, callback) {
        return (value, ...args) => {
            const result = predicate(value, ...args);
            callback(value, result, ...args);
            return result;
        };
    }
    Predicate.tee = tee;
})(Predicate || (Predicate = {}));
//# sourceMappingURL=predicate.js.map