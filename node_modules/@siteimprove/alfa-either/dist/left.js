import { Equatable } from "@siteimprove/alfa-equatable";
import { Serializable } from "@siteimprove/alfa-json";
import { None, Option } from "@siteimprove/alfa-option";
/**
 * @public
 */
export class Left {
    static of(value) {
        return new Left(value);
    }
    _value;
    constructor(value) {
        this._value = value;
    }
    isLeft() {
        return true;
    }
    isRight() {
        return false;
    }
    map() {
        return this;
    }
    apply() {
        return this;
    }
    flatMap() {
        return this;
    }
    flatten() {
        return this;
    }
    reduce(reducer, accumulator) {
        return accumulator;
    }
    either(left) {
        return left(this._value);
    }
    get() {
        return this._value;
    }
    left() {
        return Option.of(this._value);
    }
    right() {
        return None;
    }
    teeLeft(callback) {
        callback(this._value);
        return this;
    }
    teeRight() {
        return this;
    }
    equals(value) {
        return value instanceof Left && Equatable.equals(value._value, this._value);
    }
    hash(hash) {
        hash.writeBoolean(false).writeUnknown(this._value);
    }
    *[Symbol.iterator]() {
        yield this._value;
    }
    toJSON() {
        return {
            type: "left",
            value: Serializable.toJSON(this._value),
        };
    }
    toString() {
        return `Left { ${this._value} }`;
    }
}
/**
 * @public
 */
(function (Left) {
    function isLeft(value) {
        return value instanceof Left;
    }
    Left.isLeft = isLeft;
})(Left || (Left = {}));
//# sourceMappingURL=left.js.map