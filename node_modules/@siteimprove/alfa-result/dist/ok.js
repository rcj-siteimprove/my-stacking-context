import { Equatable } from "@siteimprove/alfa-equatable";
import { Serializable } from "@siteimprove/alfa-json";
import { None, Option } from "@siteimprove/alfa-option";
import { Predicate } from "@siteimprove/alfa-predicate";
import { Err } from "./err.js";
const { not, test } = Predicate;
/**
 * @public
 */
export class Ok {
    static of(value) {
        return new Ok(value);
    }
    _value;
    constructor(value) {
        this._value = value;
    }
    isOk() {
        return true;
    }
    isErr() {
        return false;
    }
    map(mapper) {
        return new Ok(mapper(this._value));
    }
    mapErr() {
        return this;
    }
    mapOrElse(ok) {
        return ok(this._value);
    }
    apply(mapper) {
        return mapper.map((mapper) => mapper(this._value));
    }
    flatMap(mapper) {
        return mapper(this._value);
    }
    flatten() {
        return this._value;
    }
    reduce(reducer, accumulator) {
        return reducer(accumulator, this._value);
    }
    includes(value) {
        return Equatable.equals(this._value, value);
    }
    includesErr() {
        return false;
    }
    some(predicate) {
        return test(predicate, this._value);
    }
    someErr() {
        return false;
    }
    none(predicate) {
        return test(not(predicate), this._value);
    }
    noneErr() {
        return true;
    }
    every(predicate) {
        return test(predicate, this._value);
    }
    everyErr() {
        return true;
    }
    and(result) {
        return result;
    }
    andThen(result) {
        return result(this._value);
    }
    or() {
        return this;
    }
    orElse() {
        return this;
    }
    get() {
        return this._value;
    }
    /**
     * @internal
     */
    getUnsafe() {
        return this._value;
    }
    /**
     * @internal
     */
    getErrUnsafe(message = "Attempted to .getErrUnsafe() from Ok") {
        throw new Error(message);
    }
    getOr() {
        return this._value;
    }
    getOrElse() {
        return this._value;
    }
    getErrOr(error) {
        return error;
    }
    getErrOrElse(error) {
        return error();
    }
    ok() {
        return Option.of(this._value);
    }
    err() {
        return None;
    }
    tee(callback) {
        callback(this._value);
        return this;
    }
    teeErr() {
        return this;
    }
    equals(value) {
        return value instanceof Ok && Equatable.equals(value._value, this._value);
    }
    hash(hash) {
        hash.writeBoolean(true).writeUnknown(this._value);
    }
    *[Symbol.iterator]() {
        yield this._value;
    }
    toJSON(options) {
        return {
            type: "ok",
            value: Serializable.toJSON(this._value, options),
        };
    }
    toString() {
        return `Ok { ${this._value} }`;
    }
}
/**
 * @public
 */
(function (Ok) {
    function isOk(value) {
        return value instanceof Ok;
    }
    Ok.isOk = isOk;
})(Ok || (Ok = {}));
//# sourceMappingURL=ok.js.map