import { Comparable, Comparison } from "@siteimprove/alfa-comparable";
const { compareComparable } = Comparable;
/**
 * @public
 */
export const None = new (class None {
    isSome() {
        return false;
    }
    isNone() {
        return true;
    }
    map() {
        return this;
    }
    forEach() {
        return;
    }
    apply() {
        return this;
    }
    flatMap() {
        return this;
    }
    flatten() {
        return this;
    }
    reduce(reducer, accumulator) {
        return accumulator;
    }
    filter() {
        return this;
    }
    reject() {
        return this;
    }
    includes() {
        return false;
    }
    some() {
        return false;
    }
    none() {
        return true;
    }
    every() {
        return true;
    }
    and() {
        return this;
    }
    andThen() {
        return this;
    }
    or(option) {
        return option;
    }
    orElse(option) {
        return option();
    }
    /**
     * @internal
     */
    getUnsafe(message = "Attempted to .getUnsafe() from None") {
        throw new Error(message);
    }
    getOr(value) {
        return value;
    }
    getOrElse(value) {
        return value();
    }
    tee() {
        return this;
    }
    compare(option) {
        return this.compareWith(option, compareComparable);
    }
    compareWith(option) {
        return option.isNone() ? Comparison.Equal : Comparison.Less;
    }
    equals(value) {
        return value instanceof None;
    }
    hash(hash) {
        hash.writeBoolean(false);
    }
    *[Symbol.iterator]() { }
    toArray() {
        return [];
    }
    toJSON() {
        return {
            type: "none",
        };
    }
    toString() {
        return "None";
    }
})();
//# sourceMappingURL=none.js.map