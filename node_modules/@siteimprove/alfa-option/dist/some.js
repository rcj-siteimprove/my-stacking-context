import { Comparable, Comparison, } from "@siteimprove/alfa-comparable";
import { Equatable } from "@siteimprove/alfa-equatable";
import { Serializable } from "@siteimprove/alfa-json";
import { Predicate } from "@siteimprove/alfa-predicate";
import { None } from "./none.js";
const { not, test } = Predicate;
const { compareComparable } = Comparable;
/**
 * @public
 */
export class Some {
    static of(value) {
        return new Some(value);
    }
    _value;
    constructor(value) {
        this._value = value;
    }
    isSome() {
        return true;
    }
    isNone() {
        return false;
    }
    map(mapper) {
        return new Some(mapper(this._value));
    }
    forEach(mapper) {
        mapper(this._value);
    }
    apply(mapper) {
        return mapper.map((mapper) => mapper(this._value));
    }
    flatMap(mapper) {
        return mapper(this._value);
    }
    flatten() {
        return this._value;
    }
    reduce(reducer, accumulator) {
        return reducer(accumulator, this._value);
    }
    filter(predicate) {
        return test(predicate, this._value) ? this : None;
    }
    reject(predicate) {
        return this.filter(not(predicate));
    }
    includes(value) {
        return Equatable.equals(value, this._value);
    }
    some(predicate) {
        return test(predicate, this._value);
    }
    none(predicate) {
        return test(not(predicate), this._value);
    }
    every(predicate) {
        return test(predicate, this._value);
    }
    and(option) {
        return option;
    }
    andThen(option) {
        return option(this._value);
    }
    or() {
        return this;
    }
    orElse() {
        return this;
    }
    get() {
        return this._value;
    }
    /**
     * @internal
     */
    getUnsafe() {
        return this._value;
    }
    getOr() {
        return this._value;
    }
    getOrElse() {
        return this._value;
    }
    tee(callback) {
        callback(this._value);
        return this;
    }
    compare(option) {
        return this.compareWith(option, compareComparable);
    }
    compareWith(option, comparer) {
        return option.isSome()
            ? comparer(this._value, option._value)
            : Comparison.Greater;
    }
    equals(value) {
        return value instanceof Some && Equatable.equals(value._value, this._value);
    }
    hash(hash) {
        hash.writeBoolean(true).writeUnknown(this._value);
    }
    *[Symbol.iterator]() {
        yield this._value;
    }
    toArray() {
        return [this._value];
    }
    toJSON(options) {
        return {
            type: "some",
            value: Serializable.toJSON(this._value, options),
        };
    }
    toString() {
        return `Some { ${this._value} }`;
    }
}
/**
 * @public
 */
(function (Some) {
    function isSome(value) {
        return value instanceof Some;
    }
    Some.isSome = isSome;
})(Some || (Some = {}));
//# sourceMappingURL=some.js.map