/**
 * This namespace provides additional types and functions for the
 * {@link (Equatable:interface)} interface.
 *
 * @public
 */
export var Equatable;
(function (Equatable) {
    // The following two type guards have been inlined from the
    // @siteimprove/alfa-refinement package to avoid creating a circular
    // dependency.
    function isFunction(value) {
        return typeof value === "function";
    }
    function isObject(value) {
        return typeof value === "object" && value !== null;
    }
    /**
     * Check if an unknown value implements the {@link (Equatable:interface)}
     * interface.
     */
    function isEquatable(value) {
        return isObject(value) && isFunction(value.equals);
    }
    Equatable.isEquatable = isEquatable;
    /**
     * Check if two unknown values are equal.
     *
     * @remarks
     * If either of the given values implement the {@link (Equatable:interface)}
     * interface, the equivalence constraints of the value will be used. If not,
     * strict equality will be used with the additional constraint that `NaN` is
     * equal to itself.
     */
    function equals(a, b) {
        if (a === b ||
            // `NaN` is the only value in JavaScript that is not equal to itself.
            (a !== a && b !== b)) {
            return true;
        }
        if (isEquatable(a)) {
            return a.equals(b);
        }
        if (isEquatable(b)) {
            return b.equals(a);
        }
        return false;
    }
    Equatable.equals = equals;
})(Equatable || (Equatable = {}));
//# sourceMappingURL=equatable.js.map