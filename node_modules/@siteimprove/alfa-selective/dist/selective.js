import { Left, Right } from "@siteimprove/alfa-either";
/**
 * {@link https://www.staff.ncl.ac.uk/andrey.mokhov/selective-functors.pdf}
 *
 * @public
 */
export class Selective {
    static of(value) {
        return new Selective(Left.of(value));
    }
    _value;
    constructor(value) {
        this._value = value;
    }
    map(mapper) {
        return new Selective(this._value.map(mapper));
    }
    apply(mapper) {
        return mapper.flatMap((mapper) => this.map(mapper));
    }
    flatMap(mapper) {
        return new Selective(this._value.flatMap((value) => mapper(value)._value));
    }
    flatten() {
        return this.flatMap((selective) => selective);
    }
    if(predicate, mapper) {
        return this._value.either((value) => predicate(value) ? new Selective(Right.of(mapper(value))) : this, () => this);
    }
    ifGuarded(predicate, guard, ifTrue, ifFalse) {
        return this._value.either((value) => predicate(value)
            ? guard(value)
                ? new Selective(Right.of(ifTrue(value)))
                : new Selective(Right.of(ifFalse(value)))
            : this, () => this);
    }
    else(mapper) {
        return new Selective(Right.of(this._value.either((value) => mapper(value), (value) => value)));
    }
    get() {
        return this._value.get();
    }
    /**
     * Ensure that this {@link (Selective:class)} is exhaustively matched,
     * returning its resulting value.
     *
     * @remarks
     * This method should only be used for cases where
     * {@link (Selective:class).get} is insufficient. If in doubt, assume that
     * it isn't.
     */
    exhaust() {
        return this.get();
    }
    tee(left, right, ...args) {
        this._value.either((value) => left(value, ...args), (value) => right(value, ...args));
        return this;
    }
    equals(value) {
        return value instanceof Selective && value._value.equals(this._value);
    }
    hash(hash) {
        hash.writeHashable(this._value);
    }
    *iterator() {
        yield this._value.get();
    }
    [Symbol.iterator]() {
        return this.iterator();
    }
    toJSON() {
        return this._value.toJSON();
    }
    toString() {
        return `Selective { ${this._value} }`;
    }
}
//# sourceMappingURL=selective.js.map