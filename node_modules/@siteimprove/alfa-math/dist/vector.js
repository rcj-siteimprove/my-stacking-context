import { Real } from "./real.js";
const { sqrt } = Math;
/**
 * @public
 */
export var Vector;
(function (Vector) {
    function isVector(value) {
        return Array.isArray(value) && value.every((n) => typeof n === "number");
    }
    Vector.isVector = isVector;
    function clone(v) {
        return v.slice(0);
    }
    Vector.clone = clone;
    function equals(v, u, e) {
        return v.length === u.length && v.every((n, i) => Real.equals(n, u[i], e));
    }
    Vector.equals = equals;
    function size(v) {
        return v.length;
    }
    Vector.size = size;
    function add(v, u) {
        return v.map((n, i) => n + u?.[i]);
    }
    Vector.add = add;
    function subtract(v, u) {
        return v.map((n, i) => n - u?.[i]);
    }
    Vector.subtract = subtract;
    function multiply(v, s) {
        return v.map((n) => n * s);
    }
    Vector.multiply = multiply;
    function divide(v, d) {
        return v.map((n) => n / d);
    }
    Vector.divide = divide;
    /**
     * Compute the dot product of two non-empty, equal length vectors.
     *
     * {@link https://en.wikipedia.org/wiki/Dot_product}
     */
    function dot(v, u) {
        return v.reduce((s, n, i) => s + n * u?.[i], 0);
    }
    Vector.dot = dot;
    /**
     * Compute the cross product of two 3-dimensional vectors.
     *
     * {@link https://en.wikipedia.org/wiki/Cross_product}
     */
    function cross(v, u) {
        const [vx, vy, vz] = v;
        const [ux, uy, uz] = u;
        return [vy * uz - vz * uy, vz * ux - vx * uz, vx * uy - vy * ux];
    }
    Vector.cross = cross;
    /**
     * Compute the norm of a vector.
     *
     * {@link https://en.wikipedia.org/wiki/Norm_(mathematics)}
     */
    function norm(v) {
        return sqrt(v.reduce((s, n) => s + n ** 2, 0));
    }
    Vector.norm = norm;
    /**
     * Compute a unit vector corresponding to a vector.
     *
     * {@link https://en.wikipedia.org/wiki/Unit_vector}
     */
    function normalize(v) {
        return divide(v, norm(v));
    }
    Vector.normalize = normalize;
})(Vector || (Vector = {}));
//# sourceMappingURL=vector.js.map