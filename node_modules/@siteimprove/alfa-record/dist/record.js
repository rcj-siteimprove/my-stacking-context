import { Iterable } from "@siteimprove/alfa-iterable";
import { Serializable } from "@siteimprove/alfa-json";
import { List } from "@siteimprove/alfa-list";
import { None } from "@siteimprove/alfa-option";
/**
 * @public
 */
export class Record {
    static of(properties) {
        const keys = Object.keys(properties ?? {}).sort();
        return new Record(new Map(Iterable.map(keys, (key, i) => [key, i])), keys, List.from(keys.map((key) => properties[key])));
    }
    _indices;
    _keys;
    _values;
    constructor(indices, keys, values) {
        this._indices = indices;
        this._keys = keys;
        this._values = values;
    }
    has(key) {
        return this._indices.has(key);
    }
    get(key) {
        const i = this._indices.get(key);
        if (i === undefined) {
            return None;
        }
        return this._values.get(i);
    }
    set(key, value) {
        const i = this._indices.get(key);
        if (i === undefined) {
            return this;
        }
        return new Record(this._indices, this._keys, this._values.set(i, value));
    }
    reduce(reducer, accumulator) {
        return Iterable.reduce(this, (accumulator, [key, value]) => reducer(accumulator, value, key), accumulator);
    }
    some(predicate) {
        return Iterable.some(this, ([key, value]) => predicate(value, key));
    }
    every(predicate) {
        return Iterable.every(this, ([key, value]) => predicate(value, key));
    }
    equals(value) {
        return (value instanceof Record &&
            value._keys.length === this._keys.length &&
            value._keys.every((key, i) => key === this._keys[i]) &&
            value._values.equals(this._values));
    }
    *keys() {
        yield* this._keys;
    }
    *values() {
        yield* this._values;
    }
    *entries() {
        yield* this;
    }
    *[Symbol.iterator]() {
        let i = 0;
        for (const value of this._values) {
            yield [this._keys[i++], value];
        }
    }
    toArray() {
        return [...this];
    }
    toJSON(options) {
        const json = {};
        for (const [key, value] of this) {
            json[key] = Serializable.toJSON(value, options);
        }
        return json;
    }
    toString() {
        const entries = this.toArray()
            .map(([key, value]) => `${key}: ${value}`)
            .join(", ");
        return `Record {${entries === "" ? "" : ` ${entries} `}}`;
    }
}
/**
 * @public
 */
(function (Record) {
    function isRecord(value) {
        return value instanceof Record;
    }
    Record.isRecord = isRecord;
    function from(entries) {
        const record = {};
        for (const [key, value] of entries) {
            record[key] = value;
        }
        return Record.of(record);
    }
    Record.from = from;
})(Record || (Record = {}));
//# sourceMappingURL=record.js.map