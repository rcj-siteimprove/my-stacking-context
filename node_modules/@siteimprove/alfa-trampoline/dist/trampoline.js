import { Array } from "@siteimprove/alfa-array";
import { Iterable } from "@siteimprove/alfa-iterable";
/**
 * {@link http://blog.higher-order.com/assets/trampolines.pdf}
 *
 * @public
 */
export class Trampoline {
    run() {
        let step = this;
        while (true) {
            const next = step.step();
            if (step !== next) {
                step = next;
            }
            else {
                return next.run();
            }
        }
    }
    map(mapper) {
        return this.flatMap((value) => Done.of(mapper(value)));
    }
    apply(mapper) {
        return mapper.flatMap((mapper) => this.map(mapper));
    }
    flatten() {
        return this.flatMap((trampoline) => trampoline);
    }
    reduce(reducer, accumulator) {
        return reducer(accumulator, this.run());
    }
    tee(callback) {
        return this.map((value) => {
            callback(value);
            return value;
        });
    }
    *iterator() {
        yield this.run();
    }
    [Symbol.iterator]() {
        return this.iterator();
    }
}
/**
 * @public
 */
(function (Trampoline) {
    function isTrampoline(value) {
        return value instanceof Trampoline;
    }
    Trampoline.isTrampoline = isTrampoline;
    function empty() {
        return done(undefined);
    }
    Trampoline.empty = empty;
    function done(value) {
        return Done.of(value);
    }
    Trampoline.done = done;
    function suspend(thunk) {
        return Suspend.of(thunk);
    }
    Trampoline.suspend = suspend;
    function delay(thunk) {
        return suspend(() => done(thunk()));
    }
    Trampoline.delay = delay;
    function traverse(values, mapper) {
        return Iterable.reduce(values, (values, value, i) => values.flatMap((values) => mapper(value, i).map((value) => Array.append(values, value))), done(Array.empty()));
    }
    Trampoline.traverse = traverse;
    function sequence(futures) {
        return traverse(futures, (value) => value);
    }
    Trampoline.sequence = sequence;
})(Trampoline || (Trampoline = {}));
class Done extends Trampoline {
    static of(value) {
        return new Done(value);
    }
    _value;
    constructor(value) {
        super();
        this._value = value;
    }
    step() {
        return this;
    }
    run() {
        return this._value;
    }
    isDone() {
        return true;
    }
    isSuspended() {
        return false;
    }
    map(mapper) {
        return new Done(mapper(this._value));
    }
    flatMap(mapper) {
        return Suspend.of(() => mapper(this._value));
    }
}
class Suspend extends Trampoline {
    static of(thunk) {
        return new Suspend(thunk);
    }
    _thunk;
    constructor(thunk) {
        super();
        this._thunk = thunk;
    }
    step() {
        return this._thunk();
    }
    isDone() {
        return false;
    }
    isSuspended() {
        return true;
    }
    flatMap(mapper) {
        return Bind.of(this._thunk, mapper);
    }
}
class Bind extends Trampoline {
    static of(thunk, mapper) {
        return new Bind(thunk, mapper);
    }
    _thunk;
    _mapper;
    constructor(thunk, mapper) {
        super();
        this._thunk = thunk;
        this._mapper = mapper;
    }
    step() {
        return this._thunk().flatMap(this._mapper);
    }
    isDone() {
        return false;
    }
    isSuspended() {
        return true;
    }
    flatMap(mapper) {
        return Suspend.of(() => Bind.of(this._thunk, (value) => this._mapper(value).flatMap(mapper)));
    }
}
//# sourceMappingURL=trampoline.js.map