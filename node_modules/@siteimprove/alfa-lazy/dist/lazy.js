import { Equatable } from "@siteimprove/alfa-equatable";
import { Serializable } from "@siteimprove/alfa-json";
import { Trampoline } from "@siteimprove/alfa-trampoline";
/**
 * @public
 */
export class Lazy {
    static of(thunk) {
        return new Lazy(Trampoline.delay(thunk));
    }
    static force(value) {
        return new Lazy(Trampoline.done(value));
    }
    _value;
    constructor(value) {
        this._value = value;
    }
    force() {
        if (this._value.isSuspended()) {
            this._value = Trampoline.done(this._value.run());
        }
        return this._value.run();
    }
    map(mapper) {
        return new Lazy(this._value.flatMap((value) => {
            if (this._value.isSuspended()) {
                this._value = Trampoline.done(value);
            }
            return Trampoline.done(mapper(value));
        }));
    }
    apply(mapper) {
        return mapper.map((mapper) => mapper(this.force()));
    }
    flatMap(mapper) {
        return new Lazy(this._value.flatMap((value) => {
            if (this._value.isSuspended()) {
                this._value = Trampoline.done(value);
            }
            return mapper(value)._value;
        }));
    }
    flatten() {
        return this.flatMap((lazy) => lazy);
    }
    equals(value) {
        return (value instanceof Lazy && Equatable.equals(value.force(), this.force()));
    }
    *iterator() {
        yield this.force();
    }
    [Symbol.iterator]() {
        return this.iterator();
    }
    toThunk() {
        return () => this.force();
    }
    toJSON(options) {
        return Serializable.toJSON(this.force(), options);
    }
    toString() {
        return `Lazy { ${this.force()} }`;
    }
}
//# sourceMappingURL=lazy.js.map