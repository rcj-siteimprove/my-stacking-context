import { Iterable } from "@siteimprove/alfa-iterable";
import { Option, None } from "@siteimprove/alfa-option";
/**
 * @public
 */
export class Cache {
    static empty() {
        return new Cache();
    }
    _storage = new WeakMap();
    constructor() { }
    get(key, ifMissing) {
        if (this._storage.has(key)) {
            const value = this._storage.get(key);
            if (ifMissing === undefined) {
                return Option.of(value);
            }
            return value;
        }
        if (ifMissing === undefined) {
            return None;
        }
        const value = ifMissing(this);
        this._storage.set(key, value);
        return value;
    }
    has(key) {
        return this._storage.has(key);
    }
    set(key, value) {
        this._storage.set(key, value);
        return this;
    }
    merge(iterable) {
        return Iterable.reduce(iterable, (cache, [key, value]) => cache.set(key, value), this);
    }
}
/**
 * @public
 */
(function (Cache) {
    function from(iterable) {
        return Cache.empty().merge(iterable);
    }
    Cache.from = from;
})(Cache || (Cache = {}));
//# sourceMappingURL=cache.js.map