import { Refinement } from "@siteimprove/alfa-refinement";
import { Comparison } from "./comparison.js";
const { isString, isNumber, isBigInt, isBoolean, isFunction, isObject } = Refinement;
/**
 * This namespace provides additional functions for the
 * {@link (Comparable:interface)} interface.
 *
 * @public
 */
export var Comparable;
(function (Comparable) {
    /**
     * Check if an unknown value implements the {@link (Comparable:interface)}
     * interface.
     */
    function isComparable(value) {
        return isObject(value) && isFunction(value.compare);
    }
    Comparable.isComparable = isComparable;
    function compare(a, b) {
        if (isString(a)) {
            return compareString(a, b);
        }
        if (isNumber(a)) {
            return compareNumber(a, b);
        }
        if (isBigInt(a)) {
            return compareBigInt(a, b);
        }
        if (isBoolean(a)) {
            return compareBoolean(a, b);
        }
        return compareComparable(a, b);
    }
    Comparable.compare = compare;
    /**
     * @remarks
     * This should only be used in cases where branch mispredictions caused by the
     * more general {@link (Comparable:namespace).(compare:1)} are undesired.
     */
    function compareString(a, b) {
        return comparePrimitive(a, b);
    }
    Comparable.compareString = compareString;
    /**
     * @remarks
     * This should only be used in cases where branch mispredictions caused by the
     * more general {@link (Comparable:namespace).(compare:2)} are undesired.
     */
    function compareNumber(a, b) {
        return comparePrimitive(a, b);
    }
    Comparable.compareNumber = compareNumber;
    /**
     * @remarks
     * This should only be used in cases where branch mispredictions caused by the
     * more general {@link (Comparable:namespace).(compare:3)} are undesired.
     */
    function compareBigInt(a, b) {
        return comparePrimitive(a, b);
    }
    Comparable.compareBigInt = compareBigInt;
    /**
     * @remarks
     * This should only be used in cases where branch mispredictions caused by the
     * more general {@link (Comparable:namespace).(compare:4)} are undesired.
     */
    function compareBoolean(a, b) {
        return comparePrimitive(a, b);
    }
    Comparable.compareBoolean = compareBoolean;
    /**
     * @remarks
     * This should only be used in cases where branch mispredictions caused by the
     * more general {@link (Comparable:namespace).(compare:5)} are undesired.
     */
    function compareComparable(a, b) {
        return a.compare(b);
    }
    Comparable.compareComparable = compareComparable;
    /**
     * Compare two primitive values.
     */
    function comparePrimitive(a, b) {
        if (a < b) {
            return Comparison.Less;
        }
        if (a > b) {
            return Comparison.Greater;
        }
        return Comparison.Equal;
    }
    /**
     * Compare tuples lexicographically
     *
     * {@link https://en.wikipedia.org/wiki/Lexicographic_order}
     */
    function compareLexicographically(a, b, comparer) {
        for (let i = 0; i < a.length; i++) {
            const comparison = comparer[i](a[i], b[i]);
            if (comparison === Comparison.Equal) {
                continue;
            }
            return comparison;
        }
        return Comparison.Equal;
    }
    Comparable.compareLexicographically = compareLexicographically;
    /**
     * Check if one value is less than another.
     */
    function isLessThan(a, b) {
        return a.compare(b) < 0;
    }
    Comparable.isLessThan = isLessThan;
    /**
     * Check if one value is less than or equal to another.
     */
    function isLessThanOrEqual(a, b) {
        return a.compare(b) <= 0;
    }
    Comparable.isLessThanOrEqual = isLessThanOrEqual;
    /**
     * Check if one value is equal to another
     */
    function isEqual(a, b) {
        return a.compare(b) === 0;
    }
    Comparable.isEqual = isEqual;
    /**
     * Check if one value is greater than another.
     */
    function isGreaterThan(a, b) {
        return a.compare(b) > 0;
    }
    Comparable.isGreaterThan = isGreaterThan;
    /**
     * Check if one value is greater than or equal to another.
     */
    function isGreaterThanOrEqual(a, b) {
        return a.compare(b) >= 0;
    }
    Comparable.isGreaterThanOrEqual = isGreaterThanOrEqual;
})(Comparable || (Comparable = {}));
//# sourceMappingURL=comparable.js.map