import { Equatable } from "@siteimprove/alfa-equatable";
import { Serializable } from "@siteimprove/alfa-json";
import { None } from "@siteimprove/alfa-option";
/**
 * @public
 */
export class Value {
    static of(value, source = None) {
        return new Value(value, source);
    }
    _value;
    _source;
    constructor(value, source) {
        this._value = value;
        this._source = source;
    }
    get value() {
        return this._value;
    }
    get source() {
        return this._source;
    }
    map(mapper) {
        return new Value(mapper(this._value, this._source), this._source);
    }
    resolve(resolver) {
        return new Value(this._value.resolve(resolver), this._source);
    }
    apply(mapper) {
        return mapper.map((mapper) => mapper(this._value));
    }
    flatMap(mapper) {
        return mapper(this._value, this._source);
    }
    flatten() {
        return this._value;
    }
    includes(value) {
        return Equatable.equals(this._value, value);
    }
    some(predicate) {
        return predicate(this._value, this._source);
    }
    none(predicate) {
        return !predicate(this._value, this._source);
    }
    equals(value) {
        return (value instanceof Value &&
            Equatable.equals(value._value, this._value) &&
            value._source.equals(this._source));
    }
    *[Symbol.iterator]() {
        yield this._value;
    }
    toJSON() {
        return {
            value: Serializable.toJSON(this._value),
            source: this._source.map((source) => source.toJSON()).getOr(null),
        };
    }
    toString() {
        return `${this._value}`;
    }
}
//# sourceMappingURL=value.js.map