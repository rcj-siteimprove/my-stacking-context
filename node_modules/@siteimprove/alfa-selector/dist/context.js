import { Map } from "@siteimprove/alfa-map";
/**
 * @public
 */
export class Context {
    static of(state) {
        return new Context(Map.from(state));
    }
    static _empty = new Context(Map.empty());
    static empty() {
        return this._empty;
    }
    _state;
    constructor(state) {
        this._state = state;
    }
    isEmpty() {
        return this._state.isEmpty();
    }
    hasState(element, state) {
        return this._state.get(element).some((found) => (found & state) !== 0);
    }
    getState(element) {
        return this._state.get(element).getOr(Context.State.None);
    }
    setState(element, state) {
        return new Context(this._state.set(element, state));
    }
    addState(element, state) {
        return this.setState(element, this.getState(element) | state);
    }
    *withState(state) {
        yield* this._state.filter((found) => (found & state) !== 0).keys();
    }
    hover(element) {
        return this.addState(element, Context.State.Hover);
    }
    static hover(element) {
        return this.empty().hover(element);
    }
    isHovered(element) {
        return this.hasState(element, Context.State.Hover);
    }
    active(element) {
        return this.addState(element, Context.State.Active);
    }
    static active(element) {
        return this.empty().active(element);
    }
    isActive(element) {
        return this.hasState(element, Context.State.Active);
    }
    focus(element) {
        return this.addState(element, Context.State.Focus);
    }
    static focus(element) {
        return this.empty().focus(element);
    }
    isFocused(element) {
        return this.hasState(element, Context.State.Focus);
    }
    visit(element) {
        return this.addState(element, Context.State.Visited);
    }
    static visit(element) {
        return this.empty().visit(element);
    }
    isVisited(element) {
        return this.hasState(element, Context.State.Visited);
    }
}
/**
 * @public
 */
(function (Context) {
    let State;
    (function (State) {
        State[State["None"] = 0] = "None";
        State[State["Hover"] = 1] = "Hover";
        State[State["Active"] = 2] = "Active";
        State[State["Focus"] = 4] = "Focus";
        State[State["Visited"] = 8] = "Visited";
    })(State = Context.State || (Context.State = {}));
})(Context || (Context = {}));
//# sourceMappingURL=context.js.map