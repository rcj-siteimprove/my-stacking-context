import { Comparable } from "@siteimprove/alfa-comparable";
// The number of bits to use for every component of the specificity computation.
// As bitwise operations in JavaScript are limited to 32 bits, we can only use
// at most 10 bits per component as 3 components are used.
const componentBits = 10;
// The maximum value that any given component can have. Since we can only use 10
// bits for every component, this in effect means that any given component count
// must be strictly less than 1024.
const componentMax = (1 << componentBits) - 1;
/**
 * {@link https://www.w3.org/TR/selectors/#specificity}
 * {@link https://drafts.csswg.org/css-cascade-5/#cascade-specificity}
 *
 * @remarks
 * Specificities are triplet (a, b, c), ordered lexicographically.
 * We also store a 32 bits integer representing the specificity with 10 bits
 * per components (and 2 wasted bits). This allows for quick lexicographic
 * comparison, which is the frequent operation on specificities. Components are
 * therefore limited to 1024 values (10 bits).
 *
 * @public
 */
export class Specificity {
    static of(a, b, c) {
        return new Specificity(a, b, c);
    }
    static _empty = new Specificity(0, 0, 0);
    static empty() {
        return Specificity._empty;
    }
    _a;
    _b;
    _c;
    _value;
    constructor(a, b, c) {
        this._a = a;
        this._b = b;
        this._c = c;
        this._value =
            (Math.min(a, componentMax) << (componentBits * 2)) |
                (Math.min(b, componentMax) << (componentBits * 1)) |
                Math.min(c, componentMax);
    }
    get a() {
        return this._a;
    }
    get b() {
        return this._b;
    }
    get c() {
        return this._c;
    }
    get value() {
        return this._value;
    }
    equals(value) {
        return value instanceof Specificity && value._value === this._value;
    }
    hash(hash) {
        hash.writeInt32(this._value);
    }
    toJSON() {
        return { a: this._a, b: this._b, c: this._c };
    }
    toString() {
        return `(${this._a}, ${this._b}, ${this._c})`;
    }
}
/**
 * @public
 */
(function (Specificity) {
    function isSpecificity(value) {
        return value instanceof Specificity;
    }
    Specificity.isSpecificity = isSpecificity;
    function sum(...specificities) {
        if (specificities.length === 0) {
            return Specificity.empty();
        }
        const [first, ...rest] = specificities;
        return rest.reduce((pre, cur) => Specificity.of(pre.a + cur.a, pre.b + cur.b, pre.c + cur.c), first);
    }
    Specificity.sum = sum;
    function max(...specificities) {
        if (specificities.length === 0) {
            return Specificity.empty();
        }
        const [first, ...rest] = specificities;
        return rest.reduce((pre, cur) => (pre.value > cur.value ? pre : cur), first);
    }
    Specificity.max = max;
    Specificity.compare = (a, b) => Comparable.compareNumber(a.value, b.value);
})(Specificity || (Specificity = {}));
//# sourceMappingURL=specificity.js.map