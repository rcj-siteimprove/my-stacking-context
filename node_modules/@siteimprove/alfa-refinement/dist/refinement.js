import { Predicate } from "@siteimprove/alfa-predicate";
/**
 * @public
 */
export var Refinement;
(function (Refinement) {
    Refinement.test = Predicate.test;
    Refinement.fold = Predicate.fold;
    Refinement.not = Predicate.not;
    Refinement.and = Predicate.and;
    Refinement.or = Predicate.or;
    Refinement.xor = Predicate.xor;
    Refinement.nor = Predicate.nor;
    Refinement.nand = Predicate.nand;
    Refinement.equals = Predicate.equals;
    function isString(value) {
        return typeof value === "string";
    }
    Refinement.isString = isString;
    function isNumber(value) {
        return typeof value === "number";
    }
    Refinement.isNumber = isNumber;
    function isBigInt(value) {
        return typeof value === "bigint";
    }
    Refinement.isBigInt = isBigInt;
    function isBoolean(value) {
        return typeof value === "boolean";
    }
    Refinement.isBoolean = isBoolean;
    function isNull(value) {
        return value === null;
    }
    Refinement.isNull = isNull;
    function isUndefined(value) {
        return value === undefined;
    }
    Refinement.isUndefined = isUndefined;
    function isSymbol(value) {
        return typeof value === "symbol";
    }
    Refinement.isSymbol = isSymbol;
    function isFunction(value) {
        return typeof value === "function";
    }
    Refinement.isFunction = isFunction;
    function isObject(value) {
        return typeof value === "object" && value !== null;
    }
    Refinement.isObject = isObject;
    Refinement.isPrimitive = Refinement.or(isString, Refinement.or(isNumber, Refinement.or(isBigInt, Refinement.or(isBoolean, Refinement.or(isNull, Refinement.or(isUndefined, isSymbol))))));
})(Refinement || (Refinement = {}));
//# sourceMappingURL=refinement.js.map