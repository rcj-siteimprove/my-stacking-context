import { Array } from "@siteimprove/alfa-array";
import {} from "@siteimprove/alfa-comparable";
import { Lazy } from "@siteimprove/alfa-lazy";
import { Cons } from "./cons.js";
import { Nil } from "./nil.js";
/**
 * @public
 */
export var Sequence;
(function (Sequence) {
    function isSequence(value) {
        return isCons(value) || isNil(value);
    }
    Sequence.isSequence = isSequence;
    function isCons(value) {
        return Cons.isCons(value);
    }
    Sequence.isCons = isCons;
    function isNil(value) {
        return value === Nil;
    }
    Sequence.isNil = isNil;
    function of(head, tail) {
        return Cons.of(head, tail);
    }
    Sequence.of = of;
    function empty() {
        return Nil;
    }
    Sequence.empty = empty;
    function from(iterable) {
        if (isSequence(iterable)) {
            return iterable;
        }
        if (Array.isArray(iterable)) {
            return fromArray(iterable);
        }
        return fromIterable(iterable);
    }
    Sequence.from = from;
    function fromArray(array) {
        let i = 0;
        const tail = () => {
            if (i >= array.length) {
                return empty();
            }
            return of(array[i++], Lazy.of(tail));
        };
        return tail();
    }
    Sequence.fromArray = fromArray;
    function fromIterable(iterable) {
        return fromIterator(iterable[Symbol.iterator]());
    }
    Sequence.fromIterable = fromIterable;
    function fromIterator(iterator) {
        const tail = () => {
            const head = iterator.next();
            if (head.done === true) {
                return empty();
            }
            return of(head.value, Lazy.of(tail));
        };
        return tail();
    }
    Sequence.fromIterator = fromIterator;
})(Sequence || (Sequence = {}));
//# sourceMappingURL=sequence.js.map