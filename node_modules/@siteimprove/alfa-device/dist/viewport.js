/**
 * @public
 */
export class Viewport {
    static of(width, height = width / (16 / 9), orientation = Viewport.Orientation.Landscape) {
        return new Viewport(width, height, orientation);
    }
    _width;
    _height;
    _orientation;
    constructor(width, height, orientation) {
        this._width = width;
        this._height = height;
        this._orientation = orientation;
    }
    /**
     * {@link https://www.w3.org/TR/mediaqueries/#width}
     */
    get width() {
        return this._width;
    }
    /**
     * {@link https://www.w3.org/TR/mediaqueries/#height}
     */
    get height() {
        return this._height;
    }
    /**
     * {@link https://www.w3.org/TR/mediaqueries/#orientation}
     */
    get orientation() {
        return this._orientation;
    }
    isLandscape() {
        return this._orientation === Viewport.Orientation.Landscape;
    }
    isPortrait() {
        return this._orientation === Viewport.Orientation.Portrait;
    }
    equals(value) {
        return (value instanceof Viewport &&
            value._width === this._width &&
            value._height === this._height &&
            value._orientation === this._orientation);
    }
    hash(hash) {
        hash.writeUint32(this._width);
        hash.writeUint32(this._height);
        switch (this._orientation) {
            case Viewport.Orientation.Landscape:
                hash.writeUint8(1);
                break;
            case Viewport.Orientation.Portrait:
                hash.writeUint8(2);
        }
    }
    toJSON(options) {
        return {
            width: this._width,
            height: this._height,
            orientation: this._orientation,
        };
    }
}
/**
 * @public
 */
(function (Viewport) {
    let Orientation;
    (function (Orientation) {
        Orientation["Portrait"] = "portrait";
        Orientation["Landscape"] = "landscape";
    })(Orientation = Viewport.Orientation || (Viewport.Orientation = {}));
    function from(json) {
        return Viewport.of(json.width, json.height, json.orientation);
    }
    Viewport.from = from;
    function standard() {
        return Viewport.of(1280, 720, Orientation.Landscape);
    }
    Viewport.standard = standard;
})(Viewport || (Viewport = {}));
//# sourceMappingURL=viewport.js.map